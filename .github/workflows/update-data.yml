name: Update data.txt

on:
  schedule:
    - cron: '*/29 * * * *' # Every 29 minutes
  push:
    branches:
      - main

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.ACTIONS_PAT }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Fetch data from source
      run: |
        echo "Fetching data from source"
        curl -L -o data.txt "https://drive.google.com/uc?export=download&id=1-6p05WRNFuCef8OnlkexeZP-HR-hRXYl"
        echo "Fetch response code: $?"
        cat data.txt

    - name: Process times and calculate differences
      run: |
        echo "Processing times and calculating differences"
        
        # Extract entire second line
        second_line=$(sed -n '2p' data.txt)
        echo "Entire Second Line: \"$second_line\""

        # Extract time from the second line
        computer_time=$(echo "$second_line" | cut -d',' -f2)
        echo "Extracted Computer Check Time: \"$computer_time\""
        
        # Extract entire third line
        third_line=$(sed -n '3p' data.txt)
        echo "Entire Third Line: \"$third_line\""

        # Extract time from the third line
        ib_time=$(echo "$third_line" | cut -d',' -f2)
        echo "Extracted IB Check Time: \"$ib_time\""

        # Convert current time to HKT and log it
        current_time=$(TZ='Asia/Hong_Kong' date +"%m/%d/%Y %H:%M:%S")
        echo "Current Time (HKT): $current_time"
        
        # Convert times to seconds since epoch
        computer_epoch=$(date -d "$computer_time" +%s)
        ib_epoch=$(date -d "$ib_time" +%s)
        current_epoch=$(date -d "$current_time" +%s)
        
        # Calculate time differences
        diff_computer=$((current_epoch - computer_epoch))
        diff_ib=$((current_epoch - ib_epoch))
        
        # Convert differences to hours, minutes, seconds
        format_time_diff() {
            local total_seconds=$1
            local hours=$((total_seconds / 3600))
            local minutes=$(( (total_seconds % 3600) / 60))
            local seconds=$((total_seconds % 60))
            printf "%02d:%02d:%02d\n" $hours $minutes $seconds
        }
        
        time_diff_computer=$(format_time_diff $diff_computer)
        time_diff_ib=$(format_time_diff $diff_ib)
        
        # Log the results
        echo "Time Difference - Current Time vs Computer Check Time: \"$time_diff_computer\""
        echo "Time Difference - Current Time vs IB Check Time: \"$time_diff_ib\""

        # Initialize last alert timestamp
        last_alert_timestamp_file="last_alert_timestamp.txt"
        if [ ! -f "$last_alert_timestamp_file" ]; then
          echo "0" > "$last_alert_timestamp_file"
        fi
        last_alert_timestamp=$(cat "$last_alert_timestamp_file")
        echo "Last Alert Timestamp: $last_alert_timestamp"

        # Function to send email via EmailJS
        alert_email() {
            curl -X POST \
            -H "Content-Type: application/json" \
            -d '{}' https://api.emailjs.com/api/v1.0/email/send
        }

        # Check if time differences exceed 00:20:00 and send email if they do
        send_alert=false
        if [[ "$time_diff_computer" > "00:20:00" ]]; then
            echo "Time Difference - Current Time vs Computer Check Time exceeds 20 minutes."
            send_alert=true
            alert_message="Current Time - Computer Check Time exceeds 20 minutes."
        fi

        if [[ "$time_diff_ib" > "00:20:00" ]]; then
            echo "Time Difference - Current Time vs IB Check Time exceeds 20 minutes."
            send_alert=true
            alert_message="Current Time - IB Check Time exceeds 20 minutes."
        fi

        now=$(date +%s)
        echo "Current Epoch Time: $now"
        if [ "$send_alert" = true ] && [ $((now - last_alert_timestamp)) -gt 5400 ]; then
            echo "Sending alert email."
            alert_email "$alert_message"
            echo "$now" > "$last_alert_timestamp_file"
        else
            echo "Alert not sent due to cooldown period or no condition met."
        fi

        # Send a demo email to test the email feature
        echo "Sending demo email for testing purposes."
        alert_email "This is a demo email to test the EmailJS integration."

    - name: Commit and push changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add data.txt last_alert_timestamp.txt
        git commit -m "Update data.txt" || echo "No changes to commit"
        git push https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/thdennis/PowerShellGitHubPage.git
      env:
        ACTIONS_PAT: ${{ secrets.ACTIONS_PAT }}
